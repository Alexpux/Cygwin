%import {
#include "winsup.h"
#include "devices.h"
#include "sys/cygwin.h"
#include "tty.h"
#include "pinfo.h"
typedef const device *KR_device_t;
}
%type KR_device_t
%local {
const device dev_cygdrive_storage =
  {"/cygdrive", {FH_CYGDRIVE}, "/cygdrive"};

const device dev_fs_storage =
  {"", {FH_FS}, ""};

const device dev_proc_storage =
  {"", {FH_PROC}, ""};

const device dev_procnet_storage =
  {"", {FH_PROCNET}, ""};

const device dev_procsys_storage =
  {"", {FH_PROCSYS}, ""};

const device dev_netdrive_storage =
  {"", {FH_NETDRIVE}, ""};

#if 0
const device dev_dev_storage =
  {"/dev", {FH_DEV}, "/dev"};
#endif

const device dev_registry_storage =
  {"", {FH_REGISTRY}, ""};

const device dev_piper_storage =
  {"", {FH_PIPER}, ""};

const device dev_pipew_storage =
  {"", {FH_PIPEW}, ""};

const device dev_tcp_storage =
  {"", {FH_TCP}, ""};

const device dev_udp_storage =
  {"", {FH_UDP}, ""};

const device dev_stream_storage =
  {"", {FH_STREAM}, ""};

const device dev_dgram_storage =
  {"", {FH_DGRAM}, ""};

const device dev_bad_storage =
  {"", {FH_BAD}, ""};
#define BRACK(x) {x}

%storage_here
}
%%
"/dev/tty", BRACK(FH_TTY), "\\dev\\tty"
"/dev/tty%(0-63)d", BRACK(FHDEV(DEV_TTYS_MAJOR, {$1})), "\\dev\\tty{$1}", ttys_dev
"/dev/console", BRACK(FH_CONSOLE), "\\dev\\console", console_dev
"/dev/ttym", BRACK(FH_TTYM), "\\dev\\ttym", ttym_dev
"/dev/ptmx", BRACK(FH_PTYM), "\\dev\\ptmx"
"/dev/windows", BRACK(FH_WINDOWS), "\\dev\\windows"
"/dev/dsp", BRACK(FH_OSS_DSP), "\\dev\\dsp"
"/dev/conin", BRACK(FH_CONIN), "conin"
"/dev/conout", BRACK(FH_CONOUT), "conout"
"/dev/null", BRACK(FH_NULL), "\\Device\\Null"
"/dev/zero", BRACK(FH_ZERO), "\\dev\\zero"
"/dev/full", BRACK(FH_FULL), "\\dev\\full"
"/dev/random", BRACK(FH_RANDOM), "\\dev\\random"
"/dev/urandom", BRACK(FH_URANDOM), "\\dev\\urandom", urandom_dev
"/dev/mem", BRACK(FH_MEM), "\\dev\\mem"
"/dev/kmem", BRACK(FH_KMEM), "\\dev\\mem"
"/dev/clipboard", BRACK(FH_CLIPBOARD), "\\dev\\clipboard"
"/dev/port", BRACK(FH_PORT), "\\dev\\port"
"/dev/com%(1-16)d", BRACK(FHDEV(DEV_SERIAL_MAJOR, {$1 - 1})), "\\??\\COM{$1}"
"/dev/ttyS%(0-63)d", BRACK(FHDEV(DEV_SERIAL_MAJOR, {$1})), "\\??\\COM{$1 + 1}"
"/dev/pipe", BRACK(FH_PIPE), "\\dev\\pipe"
"/dev/fifo", BRACK(FH_FIFO), "\\dev\\fifo"
"/dev/st%(0-127)d", BRACK(FHDEV(DEV_TAPE_MAJOR, {$1})), "\\Device\\Tape{$1}"
"/dev/nst%(0-127)d", BRACK(FHDEV(DEV_TAPE_MAJOR, {$1 + 128})), "\\Device\\Tape{$1}"
"/dev/fd%(0-15)d", BRACK(FHDEV(DEV_FLOPPY_MAJOR, {$1})), "\\Device\\Floppy{$1}"
"/dev/scd%(0-15)d", BRACK(FHDEV(DEV_CDROM_MAJOR, {$1})), "\\Device\\CdRom{$1}"
"/dev/sr%(0-15)d", BRACK(FHDEV(DEV_CDROM_MAJOR, {$1})), "\\Device\\CdRom{$1}"
"/dev/sd%{a-z}s", BRACK(FH_SD{uc $1}), "\\Device\\Harddisk{ord($1) - ord('a')}\\Partition0"
"/dev/sda%{a-z}s", BRACK(FH_SDA{uc $1}), "\\Device\\Harddisk{26 + ord($1) - ord('a')}\\Partition0"
"/dev/sdb%{a-z}s", BRACK(FH_SDB{uc $1}), "\\Device\\Harddisk{52 + ord($1) - ord('a')}\\Partition0"
"/dev/sdc%{a-z}s", BRACK(FH_SDC{uc $1}), "\\Device\\Harddisk{78 + ord($1) - ord('a')}\\Partition0"
"/dev/sdd%{a-x}s", BRACK(FH_SDD{uc $1}), "\\Device\\Harddisk{104 + ord($1) - ord('a')}\\Partition0"
"/dev/sd%{a-z}s%(1-15)d", BRACK(FH_SD{uc $1} | {$2}), "\\Device\\Harddisk{ord($1) - ord('a')}\\Partition{$2 % 16}"
"/dev/sda%{a-z}s%(1-15)d", BRACK(FH_SDA{uc $1} | {$2}), "\\Device\\Harddisk{26 + ord($1) - ord('a')}\\Partition{$2 % 16}"
"/dev/sdb%{a-z}s%(1-15)d", BRACK(FH_SDB{uc $1} | {$2}), "\\Device\\Harddisk{52 + ord($1) - ord('a')}\\Partition{$2 % 16}"
"/dev/sdc%{a-z}s%(1-15)d", BRACK(FH_SDC{uc $1} | {$2}), "\\Device\\Harddisk{78 + ord($1) - ord('a')}\\Partition{$2 % 16}"
"/dev/sdd%{a-x}s%(1-15)d", BRACK(FH_SDD{uc $1} | {$2}), "\\Device\\Harddisk{104 + ord($1) - ord('a')}\\Partition{$2 % 16}"
"/dev/kmsg", BRACK(FH_KMSG), "\\Device\\MailSlot\\cygwin\\dev\\kmsg"
"/dev", BRACK(FH_DEV), "/dev"
%other	{return	NULL;}
%%
#undef BRACK
void
device::parse (const char *s)
{
  size_t len = strlen (s);
  const device *dev = KR_find_keyword (s, len);

  if (!dev)
    *this = *fs_dev;
  else
    *this = *dev;
}

void
device::init ()
{
  /* nothing to do... yet */
}

void
device::parse (_major_t major, _minor_t minor)
{
  _dev_t dev = FHDEV (major, minor);

  devn = 0;

  for (unsigned i = 0; i < (sizeof (dev_storage) / sizeof (dev_storage[0])); i++)
    if (dev_storage[i].devn == dev)
      {
	*this = dev_storage[i];
	break;
      }

  if (!*this)
    devn = FHDEV (major, minor);
}

void
device::parse (_dev_t dev)
{
  parse (_major (dev), _minor (dev));
}

void
device::tty_to_real_device ()
{
  if (!real_tty_attached (myself))
    *this = myself->ctty < 0 ? dev_bad_storage : *console_dev;
  else
    parse (DEV_TTYS_MAJOR, myself->ctty);
}

void
device::parsedisk (int drive, int part)
{
  int base;
  if (drive < ('q' - 'a'))      /* /dev/sda -to- /dev/sdp */
    base = DEV_SD_MAJOR;
  else if (drive < 32)		/* /dev/sdq -to- /dev/sdaf */
    {
      base = DEV_SD1_MAJOR;
      drive -= 'q' - 'a';
    }
  else if (drive < 48)		/* /dev/sdag -to- /dev/sdav */
    {
      base = DEV_SD2_MAJOR;
      drive -= 32;
    }
  else if (drive < 64)		/* /dev/sdaw -to- /dev/sdbl */
    {
      base = DEV_SD3_MAJOR;
      drive -= 48;
    }
  else if (drive < 80)		/* /dev/sdbm -to- /dev/sdcb */
    {
      base = DEV_SD4_MAJOR;
      drive -= 64;
    }
  else if (drive < 96)		/* /dev/sdcc -to- /dev/sdcr */
    {
      base = DEV_SD5_MAJOR;
      drive -= 80;
    }
  else if (drive < 112)		/* /dev/sdcs -to- /dev/sddh */
    {
      base = DEV_SD6_MAJOR;
      drive -= 96;
    }
  /* NOTE: This will cause multiple /dev/sddx entries in
	   /proc/partitions if there are more than 128 devices */
  else				/* /dev/sddi -to- /dev/sddx */
    {
      base = DEV_SD7_MAJOR;
      drive -= 112;
    }
  parse (base, part + (drive * 16));
}
